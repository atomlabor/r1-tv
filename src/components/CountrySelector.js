import React, { useState, useEffect } from 'react';
import '../styles/CountrySelector.css';

// Flag emoji mapping for countries
const countryFlags = {
  'AD': 'üá¶üá©', 'AE': 'üá¶üá™', 'AF': 'üá¶üá´', 'AL': 'üá¶üá±', 'AM': 'üá¶üá≤', 'AO': 'üá¶üá¥', 'AR': 'üá¶üá∑',
  'AT': 'üá¶üáπ', 'AU': 'üá¶üá∫', 'AW': 'üá¶üáº', 'AZ': 'üá¶üáø', 'BA': 'üáßüá¶', 'BD': 'üáßüá©', 'BE': 'üáßüá™',
  'BF': 'üáßüá´', 'BG': 'üáßüá¨', 'BH': 'üáßüá≠', 'BJ': 'üáßüáØ', 'BM': 'üáßüá≤', 'BN': 'üáßüá≥', 'BO': 'üáßüá¥',
  'BQ': 'üáßüá∂', 'BR': 'üáßüá∑', 'BS': 'üáßüá∏', 'BY': 'üáßüáæ', 'CA': 'üá®üá¶', 'CD': 'üá®üá©', 'CH': 'üá®üá≠',
  'CI': 'üá®üáÆ', 'CL': 'üá®üá±', 'CM': 'üá®üá≤', 'CN': 'üá®üá≥', 'CO': 'üá®üá¥', 'CR': 'üá®üá∑', 'CU': 'üá®üá∫',
  'CV': 'üá®üáª', 'CW': 'üá®üáº', 'CY': 'üá®üáæ', 'CZ': 'üá®üáø', 'DE': 'üá©üá™', 'DJ': 'üá©üáØ', 'DK': 'üá©üá∞',
  'DO': 'üá©üá¥', 'DZ': 'üá©üáø', 'EC': 'üá™üá®', 'EE': 'üá™üá™', 'EG': 'üá™üá¨', 'EH': 'üá™üá≠', 'ER': 'üá™üá∑',
  'ES': 'üá™üá∏', 'ET': 'üá™üáπ', 'FI': 'üá´üáÆ', 'FO': 'üá´üá¥', 'FR': 'üá´üá∑', 'GE': 'üá¨üá™', 'GH': 'üá¨üá≠',
  'GL': 'üá¨üá±', 'GM': 'üá¨üá≤', 'GN': 'üá¨üá≥', 'GP': 'üá¨üáµ', 'GQ': 'üá¨üá∂', 'GR': 'üá¨üá∑', 'GT': 'üá¨üáπ',
  'GU': 'üá¨üá∫', 'GY': 'üá¨üáæ', 'HK': 'üá≠üá∞', 'HN': 'üá≠üá≥', 'HR': 'üá≠üá∑', 'HT': 'üá≠üáπ', 'HU': 'üá≠üá∫',
  'ID': 'üáÆüá©', 'IE': 'üáÆüá™', 'IL': 'üáÆüá±', 'IN': 'üáÆüá≥', 'IQ': 'üáÆüá∂', 'IR': 'üáÆüá∑', 'IS': 'üáÆüá∏',
  'IT': 'üáÆüáπ', 'JM': 'üáØüá≤', 'JO': 'üáØüá¥', 'JP': 'üáØüáµ', 'KE': 'üá∞üá™', 'KH': 'üá∞üá≠', 'KN': 'üá∞üá≥',
  'KR': 'üá∞üá∑', 'KW': 'üá∞üáº', 'KZ': 'üá∞üáø', 'LA': 'üá±üá¶', 'LB': 'üá±üáß', 'LC': 'üá±üá®', 'LK': 'üá±üá∞',
  'LT': 'üá±üáπ', 'LU': 'üá±üá∫', 'LV': 'üá±üáª', 'LY': 'üá±üáæ', 'MA': 'üá≤üá¶', 'MC': 'üá≤üá®', 'MD': 'üá≤üá©',
  'ME': 'üá≤üá™', 'MK': 'üá≤üá∞', 'ML': 'üá≤üá±', 'MM': 'üá≤üá≤', 'MN': 'üá≤üá≥', 'MQ': 'üá≤üá∂', 'MT': 'üá≤üáπ',
  'MU': 'üá≤üá∫', 'MV': 'üá≤üáª', 'MX': 'üá≤üáΩ', 'MY': 'üá≤üáæ', 'MZ': 'üá≤üáø', 'NA': 'üá≥üá¶', 'NG': 'üá≥üá¨',
  'NI': 'üá≥üáÆ', 'NL': 'üá≥üá±', 'NO': 'üá≥üá¥', 'NP': 'üá≥üáµ', 'NZ': 'üá≥üáø', 'OM': 'üá¥üá≤', 'PA': 'üáµüá¶',
  'PE': 'üáµüá™', 'PF': 'üáµüá´', 'PH': 'üáµüá≠', 'PK': 'üáµüá∞', 'PL': 'üáµüá±', 'PR': 'üáµüá∑', 'PS': 'üáµüá∏',
  'PT': 'üáµüáπ', 'PY': 'üáµüáæ', 'QA': 'üá∂üá¶', 'RO': 'üá∑üá¥', 'RS': 'üá∑üá∏', 'RU': 'üá∑üá∫', 'RW': 'üá∑üáº',
  'SA': 'üá∏üá¶', 'SD': 'üá∏üá©', 'SE': 'üá∏üá™', 'SG': 'üá∏üá¨', 'SI': 'üá∏üáÆ', 'SK': 'üá∏üá∞', 'SM': 'üá∏üá≤',
  'SN': 'üá∏üá≥', 'SO': 'üá∏üá¥', 'SR': 'üá∏üá∑', 'SV': 'üá∏üáª', 'SX': 'üá∏üáΩ', 'SY': 'üá∏üáæ', 'TD': 'üáπüá©',
  'TG': 'üáπüá¨', 'TH': 'üáπüá≠', 'TJ': 'üáπüáØ', 'TN': 'üáπüá≥', 'TR': 'üáπüá∑', 'TT': 'üáπüáπ', 'TW': 'üáπüáº',
  'UA': 'üá∫üá¶', 'UG': 'üá∫üá¨', 'UK': 'üá¨üáß', 'US': 'üá∫üá∏', 'UY': 'üá∫üáæ', 'UZ': 'üá∫üáø', 'VE': 'üáªüá™',
  'VG': 'üáªüá¨', 'VN': 'üáªüá≥', 'WS': 'üáºüá∏', 'XK': 'üáΩüá∞', 'YE': 'üáæüá™', 'ZA': 'üáøüá¶', 'ZW': 'üáøüáº'
};

/**
 * CountrySelector - Modern UI component for selecting countries with TV channels
 * Loads available countries from tv-garden-channel-list API
 * Features dark mode design optimized for Rabbit R1 display
 */
const CountrySelector = ({ onCountrySelect, selectedCountry }) => {
  const [countries, setCountries] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchCountries();
  }, []);

  const fetchCountries = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch('https://tv-garden-channel-list.vercel.app/api/countries');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Sort countries alphabetically
      const sortedCountries = data.sort((a, b) => a.name.localeCompare(b.name));
      setCountries(sortedCountries);
    } catch (err) {
      console.error('Error fetching countries:', err);
      setError('Fehler beim Laden der L√§nder');
    } finally {
      setLoading(false);
    }
  };

  const handleCountryClick = (country) => {
    onCountrySelect(country);
  };

  const filteredCountries = countries.filter(country =>
    country.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    country.code.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (loading) {
    return (
      <div className="country-selector">
        <div className="header">
          <h1 className="title">TV Kan√§le</h1>
          <p className="subtitle">Lade verf√ºgbare L√§nder...</p>
        </div>
        <div className="loading-container">
          <div className="loading-spinner"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="country-selector">
        <div className="header">
          <h1 className="title">TV Kan√§le</h1>
          <p className="subtitle">Fehler beim Laden</p>
        </div>
        <div className="error-container">
          <div className="error-card">
            <span className="error-icon">‚ö†Ô∏è</span>
            <p className="error-message">{error}</p>
            <button className="retry-button" onClick={fetchCountries}>
              Erneut versuchen
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="country-selector">
      <div className="header">
        <h1 className="title">TV Kan√§le</h1>
        <p className="subtitle">{selectedCountry ? `${selectedCountry.name} ausgew√§hlt` : 'Land ausw√§hlen'}</p>
      </div>

      <div className="search-container">
        <div className="search-card">
          <span className="search-icon">üîç</span>
          <input
            type="text"
            placeholder="Land suchen..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
        </div>
      </div>

      <div className="countries-grid">
        {filteredCountries.length === 0 ? (
          <div className="no-results">
            <span className="no-results-icon">üåç</span>
            <p>Keine L√§nder gefunden</p>
          </div>
        ) : (
          filteredCountries.map((country) => (
            <div
              key={country.code}
              className={`country-card ${
                selectedCountry?.code === country.code ? 'selected' : ''
              }`}
              onClick={() => handleCountryClick(country)}
            >
              <div className="country-flag">
                {countryFlags[country.code] || 'üè≥Ô∏è'}
              </div>
              <div className="country-info">
                <h3 className="country-name">{country.name}</h3>
                <p className="country-code">{country.code}</p>
                <p className="country-channels">
                  {country.channelCount || 0} Kan√§le
                </p>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default CountrySelector;
